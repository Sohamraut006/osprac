#include<stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/wait.h>
#include<stdlib.h>

void bubble_asc(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
    printf("\nArray in ascending order: ");
    for (int i = 0; i < n; i++) {
        printf("\t%d", arr[i]);
    }
}

int main(int argc, char *argv[]) {
    int n = argc - 2;
    int arr[n];
    char *args[n + 2];
    args[0] = argv[1];
    
    for (int i = 0; i < n; i++) {
        arr[i] = atoi(argv[i + 2]);
    }

    bubble_asc(arr, n);

    for (int i = 0; i < n; i++) {
        sprintf(argv[i + 2], "%d", arr[i]);
        args[i + 1] = argv[i + 2];
    }
    args[n + 1] = NULL;

    pid_t pid = fork();
    if (pid == 0) {
        printf("\nI am Child Process, my pid is %d \n", getpid());
        printf("I am Parent Process, my pid is %d \n", getppid());
        execve(argv[1], args, NULL);
    } else {
        wait(NULL);
        printf("\nI am Parent Process, my pid is %d \n", getpid());
        printf("I am Parent's Parent Process, my pid is %d\n\n", getppid());
    }

    return 0;
}